/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

void clearAllClock();
void setNumberOnClock(int num);
void clearNumberOnClock(int num);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearAllClock()
{
	HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, RESET);
	HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, RESET);
	HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, RESET);
	HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, RESET);
	HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, RESET);
}

void setNumberOnClock(int num)
{
	if (num == 0)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, SET);
	}
	if (num == 1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
	}
	if (num == 2)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
	}
	if (num == 3)
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
	}
	if (num == 4)
	{
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
	}
	if (num == 5)
	{
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, SET);
	}
	if (num == 6)
	{
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, SET);
	}
	if (num == 7)
	{
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, SET);
	}
	if (num == 8)
	{
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, SET);
	}
	if (num == 9)
	{
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, SET);
	}
	if (num == 10)
	{
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, SET);
	}
	if (num == 11)
	{
		HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, SET);
	}
}

void clearNumberOnClock(int num)
{
	if (num == 0)
	{
		HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
	}
	if (num == 1)
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
	}
	if (num == 2)
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
	}
	if (num == 3)
	{
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
	}
	if (num == 4)
	{
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
	}
	if (num == 5)
	{
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
	}
	if (num == 6)
	{
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
	}
	if (num == 7)
	{
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, RESET);
	}
	if (num == 8)
	{
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, RESET);
	}
	if (num == 9)
	{
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, RESET);
	}
	if (num == 10)
	{
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, RESET);
	}
	if (num == 11)
	{
		HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, RESET);
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


//---------------------------------------------------------------------
//  Ban đầu tất cả đèn đều tắt.
//  - Cài đặt đèn chỉ phút:
//    + Nếu số phút nằm trong đoạn từ 0 tới 4: đèn chỉ phút = 0;
//    + Nếu số phút nằm trong đoạn từ 5 tới 9: đèn chỉ phút = 1;
//    + Nếu số phút nằm trong đoạn từ 10 tới 14: đèn chỉ phút = 2;
//    + Nếu số phút nằm trong đoạn từ 15 tới 19: đèn chỉ phút = 3;
//    + Tương tự như trên.
//  - Cài đặt đèn chỉ giây: tương tự như cài đặt đèn chỉ phút.
//  - Cài đặt đèn:
//    + Sau mỗi giây tất cả các đèn đều được tắt.
//	  + Nếu đèn giờ, đèn phút, đèn giây đều như nhau thì chỉ hiển thị 1 đèn, nếu khác nhau thì hiển thị đủ các đèn.
//  - Cài đặt đồng hồ: cho thời gian chạy giống như đồng hồ thật.
//---------------------------------------------------------------------

  int hourLed = 0;	//Đèn chỉ giờ.
  int minuteCounter = 0; int minuteLed = 0;	//Bộ đếm phút và đèn chỉ phút.
  int secondCounter = 0; int secondLed = 0; //Bộ đếm giây và đèn chỉ giây.
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, RESET);
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, RESET);
  HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, RESET);
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, RESET);
  HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, RESET);
  HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, RESET);
  HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, RESET);
  HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, RESET);
  while (1)
  {
	  //Cài đặt đèn chỉ phút.
	  if (minuteCounter >= 0 && minuteCounter <= 4)
	  {
		  minuteLed = 0;
	  }
	  if (minuteCounter >= 5 && minuteCounter <= 9)
	  {
		  minuteLed = 1;
	  }
	  if (minuteCounter >= 10 && minuteCounter <= 14)
	  {
		  minuteLed = 2;
	  }
	  if (minuteCounter >= 15 && minuteCounter <= 19)
	  {
		  minuteLed = 3;
	  }
	  if (minuteCounter >= 20 && minuteCounter <= 24)
	  {
		  minuteLed = 4;
	  }
	  if (minuteCounter >= 25 && minuteCounter <= 29)
	  {
		  minuteLed = 5;
	  }
	  if (minuteCounter >= 30 && minuteCounter <= 34)
	  {
		  minuteLed = 6;
	  }
	  if (minuteCounter >= 35 && minuteCounter <= 39)
	  {
		  minuteLed = 7;
	  }
	  if (minuteCounter >= 40 && minuteCounter <= 44)
	  {
		  minuteLed = 8;
	  }
	  if (minuteCounter >= 45 && minuteCounter <= 49)
	  {
		  minuteLed = 9;
	  }
	  if (minuteCounter >= 50 && minuteCounter <= 54)
	  {
		  minuteLed = 10;
	  }
	  if (minuteCounter >= 55 && minuteCounter <= 59)
	  {
		  minuteLed = 11;
	  }

	  //Cài đặt đèn chỉ giờ.
	  if (secondCounter >= 0 && secondCounter <= 4)
	  {
		  secondLed = 0;
	  }
	  if (secondCounter >= 5 && secondCounter <= 9)
	  {
		  secondLed = 1;
	  }
	  if (secondCounter >= 10 && secondCounter <= 14)
	  {
		  secondLed = 2;
	  }
	  if (secondCounter >= 15 && secondCounter <= 19)
	  {
		  secondLed = 3;
	  }
	  if (secondCounter >= 20 && secondCounter <= 24)
	  {
		  secondLed = 4;
	  }
	  if (secondCounter >= 25 && secondCounter <= 29)
	  {
		  secondLed = 5;
	  }
	  if (secondCounter >= 30 && secondCounter <= 34)
	  {
		  secondLed = 6;
	  }
	  if (secondCounter >= 35 && secondCounter <= 39)
	  {
		  secondLed = 7;
	  }
	  if (secondCounter >= 40 && secondCounter <= 44)
	  {
		  secondLed = 8;
	  }
	  if (secondCounter >= 45 && secondCounter <= 49)
	  {
		  secondLed = 9;
	  }
	  if (secondCounter >= 50 && secondCounter <= 54)
	  {
		  secondLed = 10;
	  }
	  if (secondCounter >= 55 && secondCounter <= 59)
	  {
		  secondLed = 11;
	  }

	  //Cài đặt đèn:
	  //Nếu đèn giờ, đèn phút, đèn giây đều như nhau thì chỉ hiển thị 1 đèn, nếu khác nhau thì hiển thị đủ các đèn.

	  clearAllClock();	//tắt tất cả đèn sau mỗi lần lặp.
	  if (hourLed == minuteLed)
	  {
		  if (hourLed == secondLed)
		  {
			  setNumberOnClock(hourLed);
		  }
		  if (hourLed != secondLed)
		  {
			  setNumberOnClock(hourLed);
			  setNumberOnClock(secondLed);
		  }
	  }

	  if (hourLed != minuteLed)
	  {
		  if (hourLed == secondLed)
		  {
			  setNumberOnClock(hourLed);
			  setNumberOnClock(minuteLed);
		  }
		  if (hourLed != secondLed)
		  {
			  if (minuteLed == secondLed)
			  {
				  setNumberOnClock(hourLed);
				  setNumberOnClock(minuteLed);
			  }
			  if (minuteLed != secondLed)
			  {
				  setNumberOnClock(hourLed);
				  setNumberOnClock(minuteLed);
				  setNumberOnClock(secondLed);
			  }
		  }
	  }

	  //Cài đặt đồng hồ.
	  if (secondCounter == 59)
	  {
		  if (minuteCounter == 59)
		  {
			  if (hourLed == 11)
			  {
				  hourLed = 0;
				  minuteCounter = 0;
				  secondCounter = -1;
			  }
			  hourLed++;
			  minuteCounter = 0;
			  secondCounter = -1;
		  }
		  minuteCounter++;
		  secondCounter = -1;
	  }
	  secondCounter++;
	  HAL_Delay(1000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin
                           LED8_Pin LED9_Pin LED10_Pin LED11_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin
                          |LED8_Pin|LED9_Pin|LED10_Pin|LED11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
